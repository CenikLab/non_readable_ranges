# Non Readable Range Finder
This repo houses a script to find duplicate and therefore non-readable ranges in a transcriptome.

## Dependencies
- Python for taking a Fasta file and converting it into a JSON map of genes to sequence strings. RiboPy is also needed.
- Go for taking the JSON map and creating a map of duplicates.

## Input files
- A ribo file from the target organism. This is just used to get a list of genes.
- An input Fasta file for the target organism.

There are some defaults for this set that should work on Mozart.

## Execution
First, run:
```
python fasta_to_json.py
```

This will dump a `sequence_dict.json` file in the `data` directory. You can customize the ribo file and input Fasta file with optional command line arguments, but by default it will run over human genes.

Next, run the Go file. Here is the syntax:
```
go run . -min <min read length> -max <max read length>
```

This script is computationally intensive in the first couple minutes of execution and also memory intensive. Each execution of the script takes around 4-6 minutes. In my testing on Mozart it took up around 15GB of memory per read length analyzed, so run it in chunks as to not run out of memory. The attatched bash script can automate this. Run it with:
```
bash runner.bash
```
However, depending on what else is running on Mozart, you might be able to run it in bigger chunks.

## Output format
The script will dump JSON files into the `data/output` directory for each read length. The files are essentially giant dictionaries, where the keys represent a sequence substring and the value represents the number of times the substring appears in the transcriptome.

## Analyzing the output